[
	{
		"author": "Dyne.org",
		"name": "Generate a keypair",
		"zencode": "Scenario 'ecdh': Create the keypair\nGiven that I am known as 'Alice'\nWhen I create the keypair\nThen print my data\n",
		"keys": "",
		"data": ""
	},
	{
		"author": "Dyne.org",
		"name": "Generate a random cryptographic object",
		"zencode": "rule check version 1.0.0\nScenario simple: Generate a random object\nGiven nothing\nWhen I create the random object of '128' bits\nWhen I rename the 'random_object' to 'my128BitsRandom'\nThen print the 'my128BitsRandom'\n",
		"keys": "",
		"data": ""
	},
	{
		"author": "Dyne.org",
		"name": "Encrypt a message using a password",
		"zencode": "Scenario 'ecdh': Encrypt a message with the password \nGiven that I have a 'string' named 'password' \nGiven that I have a 'string' named 'header' \nGiven that I have a 'string' named 'message' \nWhen I encrypt the secret message 'message' with 'password' \nThen print the 'secret message'",
		"keys": {
			"password": "myVerySecretPassword"
		},
		"data": {
			"header": "A very important secret",
			"message": "Dear Bob, your name is too short, goodbye - Alice."
		}
	},
	{
		"author": "Dyne.org",
		"name": "Decrypt a secret message using a password",
		"zencode": "Scenario 'ecdh': Decrypt the message with the password \nGiven that I have a valid 'secret message' \nGiven that I have a 'string' named 'password' \nWhen I decrypt the text of 'secret message' with 'password' \nWhen I rename the 'text' to 'textDecrypted' \nThen print the 'textDecrypted' as 'string'\n",
		"keys": {
			"password": "myVerySecretPassword"
		},
		"data": {
			"secret_message": {
				"checksum": "76U+nWVZBwBMbOOktCnZug==",
				"header": "QSB2ZXJ5IGltcG9ydGFudCBzZWNyZXQ=",
				"iv": "R+B2z2pTLkMVGFCuFHnYL5sAIeuolYmgUOdMm2AOvTI=",
				"text": "Df8C8Kkd+ngVAi/tGUe905VPTwId4hv+iL31dgylkDaDumI3BpRO5bN1qKfSsBi2KOA="
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "Encrypt a message for two recipients using  asymmetric cryptography (ECDH)",
		"zencode": "Rule check version 1.0.0 \nScenario 'ecdh': Alice encrypts a message for Bob \nGiven that I am known as 'Alice' \nGiven that I have my valid 'keypair' \nGiven that I have a valid 'public key' from 'Bob' \nGiven that I have a valid 'public key' from 'Carl' \nGiven that I have a 'string' named 'message' \nGiven that I have a 'string' named 'header' \nWhen I encrypt the secret message of 'message' for 'Bob' \nWhen I rename the 'secret message' to 'secretForBob' \nWhen I encrypt the secret message of 'message' for 'Carl'\nWhen I rename the 'secret message' to 'secretForCarl' \nThen print the 'secretForBob' \nThen print the 'secretForCarl' \n",
		"keys": {
			"Alice": {
				"keypair": {
					"private_key": "WBdsWLDno9/DNaap8cOXyQsCG182NJ0ddjLo/k05mgs=",
					"public_key": "BNRzlJ4csYlWgycGGiK/wgoEw3OizCdx9MWg06rxUBTP5rP9qPASOW5KY8YgmNjW5k7lLpboboHrsApWsvgkMN4="
				}
			}
		},
		"data": {
			"Bob": {
				"public_key": "BBA0kD35T9lUHR/WhDwBmgg/vMzlu1Vb0qtBjBZ8rbhdtW3AcX6z64a59RqF6FCV5q3lpiFNTmOgA264x1cZHE0="
			},
			"Carl": {
				"public_key": "BLdpLbIcpV5oQ3WWKFDmOQ/zZqTo93cT1SId8HNITgDzFeI6Y3FCBTxsKHeyY1GAbHzABsOf1Zo61FRQFLRAsc8="
			},
			"message": "Dear Bob and Carl, if you are reading this, then we're not friend anymore. Goodbye.",
			"header": "Secret message for Bob and Carl"
		}
	},
	{
		"author": "Dyne.org",
		"name": "Decrypts a secret message using asymmetric cryptography (ECDH)",
		"zencode": "Rule check version 1.0.0 \nScenario 'ecdh': Bob decrypts the message from Alice \nGiven that I am known as 'Bob' \nGiven I have my 'keypair' \nGiven I have a 'public key' from 'Alice' \nGiven I have a 'secret message' named 'secretForBob' \nWhen I decrypt the text of 'secretForBob' from 'Alice' \nWhen I rename the 'text' to 'textForBob' \nThen print the 'textForBob' as 'string' \nThen print the 'header' as 'string' inside 'secretForBob' \n",
		"keys": {
			"Bob": {
				"keypair": {
					"private_key": "psBF05iHz/X8WBpwitJoSsZ7BiKawrdaVfQN3AtTa6I=",
					"public_key": "BBA0kD35T9lUHR/WhDwBmgg/vMzlu1Vb0qtBjBZ8rbhdtW3AcX6z64a59RqF6FCV5q3lpiFNTmOgA264x1cZHE0="
				}
			}
		},
		"data": {
			"Alice": {
				"public_key": "BNRzlJ4csYlWgycGGiK/wgoEw3OizCdx9MWg06rxUBTP5rP9qPASOW5KY8YgmNjW5k7lLpboboHrsApWsvgkMN4="
			},
			"secretForBob": {
				"checksum": "sxoO1vewQmL8skCmfeiFgw==",
				"header": "U2VjcmV0IG1lc3NhZ2UgZm9yIEJvYiBhbmQgQ2FybA==",
				"iv": "AngaB+wTbAKWFDayWE2yWVSDD1f/w+lI+LkV0B8tIyM=",
				"text": "S2+pJNXhLgT46/ztk/XAJOWdl3jWR4svI170Me38bWHmvS3+kqZxkW2GIZJiw4C4GkdJ8MM2lvQJcP/GWM/7k+mc/XQoxI86Yu4RgCPqYJ+sKD0="
			},
			"secretForCarl": {
				"checksum": "7cA6o2Ipf7gtlPWfZzPJGw==",
				"header": "U2VjcmV0IG1lc3NhZ2UgZm9yIEJvYiBhbmQgQ2FybA==",
				"iv": "nX3BsOxtLWLVldnEFhRYXtnOVgAGZXoUroTzvE9GGkQ=",
				"text": "eVzpDLQTFwgeothE0pacc/J5prjtEMSDJn/ZDprWk3EB7LQD6Kemr2x4vcZ0bEh1nIvIWDZ+imSRL3PPcqJclH5IALjl6zhascYlC9xbibXaTJM="
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "Sign objects using asymmetric cryptography (ECDH)",
		"zencode": "Scenario 'ecdh': create the signature of an object \nGiven I am 'Alice' \nGiven I have my 'keypair' \nGiven that I have a 'string' named 'myMessage' inside 'mySecretStuff' \nGiven I have a 'string array' named 'myStringArray' \nWhen I create the signature of 'myStringArray' \nWhen I rename the 'signature' to 'myStringArray.signature' \nWhen I create the signature of 'keypair' \nWhen I rename the 'signature' to 'keypair.signature' \nWhen I create the signature of 'myMessage' \nWhen I rename the 'signature' to 'myMessage.signature' \nThen print the 'myMessage' \nThen print the 'myMessage.signature' \nThen print the 'myStringArray' \nThen print the 'myStringArray.signature' \nThen print the 'keypair' \nThen print the 'keypair.signature' \n",
		"keys": {
			"Alice": {
				"keypair": {
					"private_key": "Aku7vkJ7K01gQehKELav3qaQfTeTMZKgK+5VhaR3Ui0=",
					"public_key": "BBCQg21VcjsmfTmNsg+I+8m1Cm0neaYONTqRnXUjsJLPa8075IYH+a9w2wRO7rFM1cKmv19Igd7ntDZcUvLq3xI="
				}
			}
		},
		"data": {
			"mySecretStuff": {
				"myMessage": "Dear Bob, your name is too short, goodbye - Alice."
			},
			"myStringArray": [
				"Hello World! This is my string array, element [0]",
				"Hello World! This is my string array, element [1]",
				"Hello World! This is my string array, element [2]"
			]
		}
	},
	{
		"author": "Dyne.org",
		"name": "Verify a signature using asymmetric cryptography (ECDH)",
		"zencode": "rule check version 1.0.0 \nScenario 'ecdh': Bob verifies the signature from Alice \nGiven that I am known as 'Bob' \n Given I have a 'public key' from 'Alice' \nGiven I have a 'string' named 'myMessage' \nGiven I have a 'signature' named 'myMessage.signature' \nGiven I have a 'string array' named 'myStringArray' \nGiven I have a 'signature' named 'myStringArray.signature' \nWhen I verify the 'myMessage' has a signature in 'myMessage.signature' by 'Alice' \nWhen I verify the 'myStringArray' has a signature in 'myStringArray.signature' by 'Alice' \nThen print 'Zenroom certifies that signatures are all correct!' as 'string' \nThen print the 'myMessage' \n",
		"keys": {
			"Alice": {
				"public_key": "BBCQg21VcjsmfTmNsg+I+8m1Cm0neaYONTqRnXUjsJLPa8075IYH+a9w2wRO7rFM1cKmv19Igd7ntDZcUvLq3xI="
			}
		},
		"data": {
			"keypair": {
				"private_key": "Aku7vkJ7K01gQehKELav3qaQfTeTMZKgK+5VhaR3Ui0=",
				"public_key": "BBCQg21VcjsmfTmNsg+I+8m1Cm0neaYONTqRnXUjsJLPa8075IYH+a9w2wRO7rFM1cKmv19Igd7ntDZcUvLq3xI="
			},
			"keypair.signature": {
				"r": "UlrY1tYFXt0ClYncu51upl/wPPgGthEajxAxs8Ia/g4=",
				"s": "rkpKyzEJ6Sg3bgyyYDqYwZH7gDnbMBO6W0+yzpmej0o="
			},
			"myMessage": "Dear Bob, your name is too short, goodbye - Alice.",
			"myMessage.signature": {
				"r": "vWerszPubruWexUib69c7IU8Dxy1iisUmMGC7h7arDw=",
				"s": "nSjxT+JAP56HMRJjrLwwB6kP+mluYySeZcG8JPBGcpY="
			},
			"myStringArray": [
				"Hello World! This is my string array, element [0]",
				"Hello World! This is my string array, element [1]",
				"Hello World! This is my string array, element [2]"
			],
			"myStringArray.signature": {
				"r": "B8qrQqYSWaTf5Q16mBCjY1tfsD4Cf6ZSMJTHCCV8Chg=",
				"s": "S1/Syca6+XozVr5P9fQ6/AkQ+fJTMfwc063sbKmZ5B4="
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "Hash an array",
		"zencode": "Given I have a 'string array' named 'myArrayToBeHashed' \nWhen I create the flattening of 'myArrayToBeHashed' \nWhen I rename the 'flattening' to 'myFlattenedArray' \nWhen I create the hash of 'myFlattenedArray' using 'sha512' \nWhen I rename the 'hash' to 'myHashedArray' \nThen print 'myFlattenedArray' \nThen print 'myHashedArray' \n",
		"keys": {},
		"data": {
			"myArrayToBeHashed": [
				"john@beatles.com",
				"paul@beatles.com",
				"ringo@beatles.com",
				"george@beatles.com"
			]
		}
	},
	{
		"name": "separator",
		"separator": "1",
		"title": "Zero-knowledge proof flow"
	},
	{
		"author": "Dyne.org",
		"name": "[Participant] generates its credential keypair",
		"zencode": "Scenario 'credential': credential keygen \nGiven that I am known as 'Alice' \nWhen I create the credential keypair \nThen print my 'credential keypair'",
		"keys": {},
		"data": {}
	},
	{
		"author": "Dyne.org",
		"name": "[Participant] generates a credential request",
		"zencode": "Scenario 'credential': create request \nGiven that I am known as 'Alice' \nand I have my valid 'credential keypair' \nWhen I create the credential request \nThen print my 'credential request'",
		"keys": {
			"Alice": {
				"credential_keypair": {
					"private": "zK8Gs70vdLRErIKkTQdNbWfrWIExirgMKSxfGuPa1aU=",
					"public": "AxSggI9xzQ/RTjH2gRyFd+QHPCTqZucAihUyETUhVdJY9vohtmcGDFmEdOTHOTCeow=="
				}
			}
		},
		"data": {}
	},
	{
		"author": "Dyne.org",
		"name": "[Credential Issuer] generate its issuer keypair",
		"zencode": "Scenario 'credential': issuer keygen \nGiven that I am known as 'MadHatter' \nWhen I create the issuer keypair \nThen print my 'issuer keypair'",
		"keys": {},
		"data": {}
	},
	{
		"author": "Dyne.org",
		"name": "[Credential Issuer] generates its issuer verifier",
		"zencode": "Scenario 'credential': publish verifier \nGiven that I am known as 'MadHatter' \nand I have my valid 'issuer keypair' \nThen print my 'verifier' from 'issuer keypair'",
		"keys": {
			"MadHatter": {
				"issuer_keypair": {
					"issuer_sign": {
						"x": "zK8Gs70vdLRErIKkTQdNbWfrWIExirgMKSxfGuPa1aU=",
						"y": "x83wJ6rYhwowX/q4R0fNiE87JD4R48U1lBN21OgFJoE="
					},
					"verifier": {
						"alpha": "P/0EVN5KUGszzll5GlO9yI3p1p80BaWp5UdJ/R4rrRYyxcBg93F3KKOEYJtrsJ4SBlxbo59jeWEi2WBRnBwClNI4YOD3ak2llLNp7y6NN3FbSKF6ZI1aoeD22rp/SUTTQVfT6vMtzXDHaE8KEWBnN87Gb5unt6tDj1kVhbE9scTV5G62ZpJBBB3aUTbQsDtCGWQlBWb0jImIaJ3ZndChwzUVy2DBnRC5nqVDzH8BJ5AtPO46qwo8M4EQ7dLPCv1h",
						"beta": "DxkhJCeC0LmNix2Q9XZxmHKwBv6fbYymNH6PGdvnOU6uD3NhZBbp+jA27kPon1CACigQ4IT/TpUGJwoy3M0o7l2x+mxPS6akE26kMrYARNC3fbYk6N9ugbjki8WX6uPQFheJJ1ZfSiiUQ02MFmIPTDKa0bRjXTyHak41+2SbQpPU1BYreIlIrDmzP8XrEaz0H0287Mg85L/iAXdtSpOk5qRyXm+lGa6QldyYkQ22xmNN6Ch0mIb3Ds9/e8EN1bM0"
					}
				}
			}
		},
		"data": {}
	},
	{
		"author": "Dyne.org",
		"name": "[Credential Issuer] signs the credential request from the participant",
		"zencode": "Scenario 'credential': issuer sign \nGiven that I am known as 'MadHatter' \nand I have my valid 'issuer keypair' \nand I have a 'credential request' inside 'Alice' \nWhen I create the credential signature \nThen print the 'credential signature' \nand print the 'verifier' \n",
		"keys": {
			"MadHatter": {
				"issuer_keypair": {
					"issuer_sign": {
						"x": "zK8Gs70vdLRErIKkTQdNbWfrWIExirgMKSxfGuPa1aU=",
						"y": "x83wJ6rYhwowX/q4R0fNiE87JD4R48U1lBN21OgFJoE="
					},
					"verifier": {
						"alpha": "P/0EVN5KUGszzll5GlO9yI3p1p80BaWp5UdJ/R4rrRYyxcBg93F3KKOEYJtrsJ4SBlxbo59jeWEi2WBRnBwClNI4YOD3ak2llLNp7y6NN3FbSKF6ZI1aoeD22rp/SUTTQVfT6vMtzXDHaE8KEWBnN87Gb5unt6tDj1kVhbE9scTV5G62ZpJBBB3aUTbQsDtCGWQlBWb0jImIaJ3ZndChwzUVy2DBnRC5nqVDzH8BJ5AtPO46qwo8M4EQ7dLPCv1h",
						"beta": "DxkhJCeC0LmNix2Q9XZxmHKwBv6fbYymNH6PGdvnOU6uD3NhZBbp+jA27kPon1CACigQ4IT/TpUGJwoy3M0o7l2x+mxPS6akE26kMrYARNC3fbYk6N9ugbjki8WX6uPQFheJJ1ZfSiiUQ02MFmIPTDKa0bRjXTyHak41+2SbQpPU1BYreIlIrDmzP8XrEaz0H0287Mg85L/iAXdtSpOk5qRyXm+lGa6QldyYkQ22xmNN6Ch0mIb3Ds9/e8EN1bM0"
					}
				}
			}
		},
		"data": {
			"Alice": {
				"credential_request": {
					"c": {
						"a": "AyoRmyxK91Q6tbsRyz9DcgfQRT/9jyvJ1jxn+3VfNl8RDIEiSxCg2n6vZbY3ZF7y6w==",
						"b": "Ah6cmrtMBAsh+hmbX4W5QTxtJJRUy2T50Q9v8v0SC4i2RvesVPaxUylqY4LzScR8kw=="
					},
					"commit": "AkQZOK1VTQK59NJPTovzuX4I6mp9dxNBquPy9+Ulhl3KsCZLmDSuq8g3mX8xOUagRw==",
					"pi_s": {
						"c": "kmjFFXgpxvdl0icf6eZHWcW6ZuSQ3AAuQruaE5TG/bs=",
						"rk": "/l64pT8h8sbRlbDX/+VCy+AirBN5svg+zZGftI6Ht/I=",
						"rm": "IVm6gXMVwlunmC9dTDRAz1I6ko32Q+NqBXKzBj874GQ=",
						"rr": "wAnRD4mXNY7EXsArKK+FAwnztS7NOLDGEyYSL5nInb0="
					},
					"public": "AxSggI9xzQ/RTjH2gRyFd+QHPCTqZucAihUyETUhVdJY9vohtmcGDFmEdOTHOTCeow=="
				}
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "[Participant] aggregates the signed credential and its keypair ",
		"zencode": "Scenario 'credential': aggregate signature \nGiven that I am known as 'Alice' \nand I have my valid 'credential keypair' \nand I have a valid 'credential signature' \nWhen I create the credentials \nThen print my 'credentials' \nand print my 'credential keypair' \n",
		"keys": {
			"Alice": {
				"credential_keypair": {
					"private": "zK8Gs70vdLRErIKkTQdNbWfrWIExirgMKSxfGuPa1aU=",
					"public": "AxSggI9xzQ/RTjH2gRyFd+QHPCTqZucAihUyETUhVdJY9vohtmcGDFmEdOTHOTCeow=="
				}
			}
		},
		"data": {
			"credential_signature": {
				"a_tilde": "A0NjF65ns64jUX1VYTbGT1z3cLSEJpITrgJwYX2NEt5RfICjsV0Sg8VLHYrlhvCMbQ==",
				"b_tilde": "AhzMEbdDulC5f3ZWY4x8urBWJEx5wJ0MCH8Lpfik7Ct/Kfs3B2EnrtZENXIkQNX0aw==",
				"h": "AkQZOK1VTQK59NJPTovzuX4I6mp9dxNBquPy9+Ulhl3KsCZLmDSuq8g3mX8xOUagRw=="
			},
			"verifier": {
				"alpha": "P/0EVN5KUGszzll5GlO9yI3p1p80BaWp5UdJ/R4rrRYyxcBg93F3KKOEYJtrsJ4SBlxbo59jeWEi2WBRnBwClNI4YOD3ak2llLNp7y6NN3FbSKF6ZI1aoeD22rp/SUTTQVfT6vMtzXDHaE8KEWBnN87Gb5unt6tDj1kVhbE9scTV5G62ZpJBBB3aUTbQsDtCGWQlBWb0jImIaJ3ZndChwzUVy2DBnRC5nqVDzH8BJ5AtPO46qwo8M4EQ7dLPCv1h",
				"beta": "DxkhJCeC0LmNix2Q9XZxmHKwBv6fbYymNH6PGdvnOU6uD3NhZBbp+jA27kPon1CACigQ4IT/TpUGJwoy3M0o7l2x+mxPS6akE26kMrYARNC3fbYk6N9ugbjki8WX6uPQFheJJ1ZfSiiUQ02MFmIPTDKa0bRjXTyHak41+2SbQpPU1BYreIlIrDmzP8XrEaz0H0287Mg85L/iAXdtSpOk5qRyXm+lGa6QldyYkQ22xmNN6Ch0mIb3Ds9/e8EN1bM0"
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "[Participant] creates an anonymised proof",
		"zencode": "Scenario 'credential': create proof \nGiven that I am known as 'Alice' \nand I have my valid 'credential keypair' \nand I have a valid 'verifier' inside 'MadHatter' \nand I have my valid 'credentials' \nWhen I aggregate the verifiers \nand I create the credential proof \nThen print the 'credential proof' \n",
		"keys": {
			"Alice": {
				"credential_keypair": {
					"private": "zK8Gs70vdLRErIKkTQdNbWfrWIExirgMKSxfGuPa1aU=",
					"public": "AxSggI9xzQ/RTjH2gRyFd+QHPCTqZucAihUyETUhVdJY9vohtmcGDFmEdOTHOTCeow=="
				},
				"credentials": {
					"h": "AkQZOK1VTQK59NJPTovzuX4I6mp9dxNBquPy9+Ulhl3KsCZLmDSuq8g3mX8xOUagRw==",
					"s": "Agfy9VMLdrj+T2FpyUbvyy0e7Eknyd703FyDRdMgjvOPATmfT57BeUStNmftFGiI6w=="
				}
			}
		},
		"data": {
			"MadHatter": {
				"verifier": {
					"alpha": "P/0EVN5KUGszzll5GlO9yI3p1p80BaWp5UdJ/R4rrRYyxcBg93F3KKOEYJtrsJ4SBlxbo59jeWEi2WBRnBwClNI4YOD3ak2llLNp7y6NN3FbSKF6ZI1aoeD22rp/SUTTQVfT6vMtzXDHaE8KEWBnN87Gb5unt6tDj1kVhbE9scTV5G62ZpJBBB3aUTbQsDtCGWQlBWb0jImIaJ3ZndChwzUVy2DBnRC5nqVDzH8BJ5AtPO46qwo8M4EQ7dLPCv1h",
					"beta": "DxkhJCeC0LmNix2Q9XZxmHKwBv6fbYymNH6PGdvnOU6uD3NhZBbp+jA27kPon1CACigQ4IT/TpUGJwoy3M0o7l2x+mxPS6akE26kMrYARNC3fbYk6N9ugbjki8WX6uPQFheJJ1ZfSiiUQ02MFmIPTDKa0bRjXTyHak41+2SbQpPU1BYreIlIrDmzP8XrEaz0H0287Mg85L/iAXdtSpOk5qRyXm+lGa6QldyYkQ22xmNN6Ch0mIb3Ds9/e8EN1bM0"
				}
			}
		}
	},
	{
		"author": "Dyne.org",
		"name": "[Anybody] checks that the anonymised proof matches with the verifier",
		"zencode": "Scenario 'credential': credential keygen \nGiven that I am known as 'Alice' \nWhen I create the credential keypair \nThen print my 'credential keypair'",
		"keys": {
			"credential_proof": {
				"kappa": "EFpStcfpAhdGAZVBKShFqOEMDSqmik7NYR6LDgVoQZYskaY9mXwRd28N/eZ/QX+BAmXMkIWWJay8z99tFLLSB1/P50ewQ1Cpk1VQg86gg2fZMk2NE4S8qkb4YvQMsh/DDOICDKYkndcvASj4Q5hy9L6OePbwuqyd2DprOH6dcpTBVeLbhZ36ekH49GpMbBIIJhEEfllUSfpV0yBAfFwb2EpAhLnk0+SFTGQIJhzaXRyxjrwOhDzhocdR1FrcbDBr",
				"nu": "A0tPxxY6vhhaTujENsqO2Dxuzr7ZdsgnTIuWtmdFMBL6Rq49zESBpEC/ED0qsErIDA==",
				"pi_v": {
					"c": "0Uu+Ldk04+JSw9V0TQW2ufZuxe1v3K8jffunxxLLI0o=",
					"rm": "eVhYT7rl2SrlH0etus5PnxL6DRnvhhf2nMpjvI+6a9c=",
					"rr": "TO496wCVjpsUoTlKqGaTbRVXLvwrHYAgHC7sZdsLVNI="
				},
				"sigma_prime": {
					"h_prime": "Aw3ZtGYgJdiAPxqNpO4jhTS2lbAeXMSlE7HLd1qKMrufREGvnoTx2QbzilE/DkO2tQ==",
					"s_prime": "AigHHPcvR1ftxAvSEjvba9adIZnzM7+CGHrrYLa8fN4XIXkEpegY2O/ueSNCKswfLg=="
				}
			}
		},
		"data": {
			"MadHatter": {
				"verifier": {
					"alpha": "P/0EVN5KUGszzll5GlO9yI3p1p80BaWp5UdJ/R4rrRYyxcBg93F3KKOEYJtrsJ4SBlxbo59jeWEi2WBRnBwClNI4YOD3ak2llLNp7y6NN3FbSKF6ZI1aoeD22rp/SUTTQVfT6vMtzXDHaE8KEWBnN87Gb5unt6tDj1kVhbE9scTV5G62ZpJBBB3aUTbQsDtCGWQlBWb0jImIaJ3ZndChwzUVy2DBnRC5nqVDzH8BJ5AtPO46qwo8M4EQ7dLPCv1h",
					"beta": "DxkhJCeC0LmNix2Q9XZxmHKwBv6fbYymNH6PGdvnOU6uD3NhZBbp+jA27kPon1CACigQ4IT/TpUGJwoy3M0o7l2x+mxPS6akE26kMrYARNC3fbYk6N9ugbjki8WX6uPQFheJJ1ZfSiiUQ02MFmIPTDKa0bRjXTyHak41+2SbQpPU1BYreIlIrDmzP8XrEaz0H0287Mg85L/iAXdtSpOk5qRyXm+lGa6QldyYkQ22xmNN6Ch0mIb3Ds9/e8EN1bM0"
				}
			}
		}
	}
]